{
  "permissions": {
    "allow": [
      "Bash(mv:*)",
      "Bash(rg:*)",
      "Bash(rm:*)",
      "Bash(chmod:*)",
      "Bash(pio test:*)",
      "Bash(g++:*)",
      "Bash(../build/trigger_test)",
      "Bash(grep:*)",
      "Bash(touch:*)",
      "Bash(find:*)",
      "Bash(mkdir:*)",
      "Bash(git checkout:*)",
      "Bash(cp:*)",
      "Bash(./run_quick_tests.sh:*)",
      "Bash(pio.exe run:*)",
      "Bash(pio.exe test:*)",
      "Bash(ls:*)",
      "Bash(pio run:*)",
      "Bash(./run_tests.sh)",
      "Bash(git mv:*)",
      "Bash(python3:*)",
      "Bash(gcov:*)",
      "Bash(lcov:*)",
      "Bash(genhtml:*)",
      "Bash(.pio/build/test-coverage/program.exe)",
      "WebFetch(domain:docs.anthropic.com)",
      "Bash(sed:*)",
      "Bash(# Search for context.md file\nCONTEXT_FILE=\"\"\"\"\n\necho \"\"Searching for context.md file...\"\"\n\n# Check root directory\nif [ -f \"\"./context.md\"\" ]; then\n    CONTEXT_FILE=\"\"./context.md\"\"\n    echo \"\"Found context.md in root directory\"\"\n# Check docs directory  \nelif [ -f \"\"./docs/context.md\"\" ]; then\n    CONTEXT_FILE=\"\"./docs/context.md\"\"\n    echo \"\"Found context.md in docs directory\"\"\n# Search recursively\nelse\n    FOUND=$(find . -name \"\"context.md\"\" -type f | head -1)\n    if [ -n \"\"$FOUND\"\" ]; then\n        CONTEXT_FILE=\"\"$FOUND\"\"\n        echo \"\"Found context.md at: $FOUND\"\"\n    else\n        echo \"\"ERROR: No context.md file found in project\"\"\n        echo \"\"Use /write-context command to create one first\"\"\n        exit 1\n    fi\nfi\n\necho \"\"\"\"\necho \"\"=== RESTORING PREVIOUS CONTEXT ===\"\"\necho \"\"Reading from: $CONTEXT_FILE\"\"\necho \"\"\"\"\n\n# Display the context file contents\ncat \"\"$CONTEXT_FILE\"\"\n\necho \"\"\"\"\necho \"\"=== CONTEXT RESTORATION COMPLETE ===\"\"\necho \"\"\"\"\necho \"\"You can now continue where you left off based on the context above.\"\"\necho \"\"Review the ''Next Steps Available'' section for recommended actions.\"\")",
      "Bash(python:*)",
      "Bash(clear)",
      "Bash(/dev/null)",
      "Bash(timeout 45s pio test -e test)",
      "Bash(echo:*)",
      "Bash(ln:*)",
      "Bash(for f in test_*.cpp)",
      "Bash(do if [ \"$f\" != \"test_ticker_simple.cpp\" ])",
      "Bash(then mv \"$f\" \"disabled_$f\")",
      "Bash(fi)",
      "Bash(done)",
      "Bash(for f in disabled_*.cpp)",
      "Bash(do mv \"$f\" \"$f#disabled_\")",
      "Bash(true)",
      "Bash(./run_tests.bat)",
      "Bash(powershell.exe:*)",
      "WebFetch(domain:docs.platformio.org)",
      "WebFetch(domain:docs.platformio.org)",
      "WebFetch(domain:piolabs.com)",
      "Bash(./run_all_tests.sh)",
      "Bash(bash:*)",
      "Bash(./run_all_tests.bat)",
      "Bash(pio.exe lib uninstall:*)",
      "Bash(pio.exe pkg uninstall:*)",
      "Bash(pio.exe pkg update:*)"
    ],
    "deny": []
  }
}