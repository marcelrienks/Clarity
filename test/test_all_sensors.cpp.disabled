/**
 * @file test_all_sensors.cpp
 * @brief Complete Phase 1 sensor test suite - single file approach
 * 
 * @details This file contains all sensor tests in a single compilation unit
 * to avoid Unity framework multiple definition issues.
 * 
 * Phase 1 Success Criteria:
 * - All 5 sensor classes have comprehensive test coverage
 * - 100% test pass rate on both native and embedded environments
 * - Mock framework supports all required hardware interfaces
 * - Test execution time < 10 seconds for native environment
 * - Zero memory leaks detected in test runs
 * - All boundary conditions and error cases covered
 */

#include "unity.h"
#include "unity_config.h"
#include "sensors/oil_pressure_sensor.h"
#include "sensors/oil_temperature_sensor.h"
#include "sensors/key_sensor.h"
#include "sensors/lock_sensor.h"
#include "sensors/light_sensor.h"
#include "mocks/mock_gpio_provider.h"
#include "utilities/test_helpers.h"
#include "hardware/gpio_pins.h"
#include <memory>
#include <thread>
#include <chrono>
#include <cstdio>

// Global test fixtures
static std::unique_ptr<MockGpioProvider> mockGpio;

void setUp(void) {
    // Create fresh mock for each test
    mockGpio = TestHelpers::createMockGpioProvider();
}

void tearDown(void) {
    // Clean up after each test
    mockGpio.reset();
}

// ============================================================================
// OIL PRESSURE SENSOR TESTS
// ============================================================================

void test_oil_pressure_sensor_initialization() {
    std::unique_ptr<OilPressureSensor> sensor = std::make_unique<OilPressureSensor>(mockGpio.get());
    sensor->init();
    
    Reading reading = sensor->getReading();
    TEST_ASSERT_FALSE(std::holds_alternative<std::monostate>(reading));
    TEST_ASSERT_TRUE(mockGpio->getAnalogReadCount(gpio_pins::OIL_PRESSURE) > 0);
}

void test_oil_pressure_sensor_adc_mapping_minimum() {
    std::unique_ptr<OilPressureSensor> sensor = std::make_unique<OilPressureSensor>(mockGpio.get());
    TestHelpers::configureMockForOilPressure(mockGpio.get(), 0);
    sensor->init();
    
    Reading reading = sensor->getReading();
    int32_t expectedPressure = TestHelpers::calculateExpectedPressure(0);
    TestHelpers::assertReadingInt32(reading, expectedPressure);
    TEST_ASSERT_EQUAL_INT32(0, expectedPressure);
}

void test_oil_pressure_sensor_adc_mapping_maximum() {
    std::unique_ptr<OilPressureSensor> sensor = std::make_unique<OilPressureSensor>(mockGpio.get());
    TestHelpers::configureMockForOilPressure(mockGpio.get(), 4095);
    sensor->init();
    
    Reading reading = sensor->getReading();
    int32_t expectedPressure = TestHelpers::calculateExpectedPressure(4095);
    TestHelpers::assertReadingInt32(reading, expectedPressure);
    TEST_ASSERT_EQUAL_INT32(10, expectedPressure);
}

void test_oil_pressure_sensor_delta_updates() {
    std::unique_ptr<OilPressureSensor> sensor = std::make_unique<OilPressureSensor>(mockGpio.get());
    TestHelpers::configureMockForOilPressure(mockGpio.get(), 2048);
    sensor->init();
    
    Reading reading1 = sensor->getReading();
    Reading reading2 = sensor->getReading();
    
    int32_t pressure1 = std::get<int32_t>(reading1);
    int32_t pressure2 = std::get<int32_t>(reading2);
    TEST_ASSERT_EQUAL_INT32(pressure1, pressure2);
}

// ============================================================================
// OIL TEMPERATURE SENSOR TESTS
// ============================================================================

void test_oil_temperature_sensor_initialization() {
    std::unique_ptr<OilTemperatureSensor> sensor = std::make_unique<OilTemperatureSensor>(mockGpio.get());
    sensor->init();
    
    Reading reading = sensor->getReading();
    TEST_ASSERT_FALSE(std::holds_alternative<std::monostate>(reading));
    TEST_ASSERT_TRUE(mockGpio->getAnalogReadCount(gpio_pins::OIL_TEMPERATURE) > 0);
}

void test_oil_temperature_sensor_adc_mapping_minimum() {
    std::unique_ptr<OilTemperatureSensor> sensor = std::make_unique<OilTemperatureSensor>(mockGpio.get());
    TestHelpers::configureMockForOilTemperature(mockGpio.get(), 0);
    sensor->init();
    
    Reading reading = sensor->getReading();
    int32_t expectedTemp = TestHelpers::calculateExpectedTemperature(0);
    TestHelpers::assertReadingInt32(reading, expectedTemp);
}

void test_oil_temperature_sensor_adc_mapping_maximum() {
    std::unique_ptr<OilTemperatureSensor> sensor = std::make_unique<OilTemperatureSensor>(mockGpio.get());
    TestHelpers::configureMockForOilTemperature(mockGpio.get(), 4095);
    sensor->init();
    
    Reading reading = sensor->getReading();
    int32_t expectedTemp = TestHelpers::calculateExpectedTemperature(4095);
    TestHelpers::assertReadingInt32(reading, expectedTemp);
}

// ============================================================================
// KEY SENSOR TESTS
// ============================================================================

void test_key_sensor_initialization() {
    std::unique_ptr<KeySensor> sensor = std::make_unique<KeySensor>(mockGpio.get());
    sensor->init();
    
    Reading reading = sensor->getReading();
    TEST_ASSERT_FALSE(std::holds_alternative<std::monostate>(reading));
}

void test_key_sensor_present_state() {
    std::unique_ptr<KeySensor> sensor = std::make_unique<KeySensor>(mockGpio.get());
    TestHelpers::configureMockForKeySensor(mockGpio.get(), true, false);
    sensor->init();
    
    Reading reading = sensor->getReading();
    bool keyPresent = std::get<bool>(reading);
    TEST_ASSERT_TRUE(keyPresent);
}

void test_key_sensor_absent_state() {
    std::unique_ptr<KeySensor> sensor = std::make_unique<KeySensor>(mockGpio.get());
    TestHelpers::configureMockForKeySensor(mockGpio.get(), false, true);
    sensor->init();
    
    Reading reading = sensor->getReading();
    bool keyPresent = std::get<bool>(reading);
    TEST_ASSERT_FALSE(keyPresent);
}

// ============================================================================
// LOCK SENSOR TESTS
// ============================================================================

void test_lock_sensor_initialization() {
    std::unique_ptr<LockSensor> sensor = std::make_unique<LockSensor>(mockGpio.get());
    sensor->init();
    
    Reading reading = sensor->getReading();
    TEST_ASSERT_FALSE(std::holds_alternative<std::monostate>(reading));
}

void test_lock_sensor_locked_state() {
    std::unique_ptr<LockSensor> sensor = std::make_unique<LockSensor>(mockGpio.get());
    TestHelpers::configureMockForLockSensor(mockGpio.get(), true);
    sensor->init();
    
    Reading reading = sensor->getReading();
    bool lockActive = std::get<bool>(reading);
    TEST_ASSERT_TRUE(lockActive);
}

void test_lock_sensor_unlocked_state() {
    std::unique_ptr<LockSensor> sensor = std::make_unique<LockSensor>(mockGpio.get());
    TestHelpers::configureMockForLockSensor(mockGpio.get(), false);
    sensor->init();
    
    Reading reading = sensor->getReading();
    bool lockActive = std::get<bool>(reading);
    TEST_ASSERT_FALSE(lockActive);
}

// ============================================================================
// LIGHT SENSOR TESTS
// ============================================================================

void test_light_sensor_initialization() {
    std::unique_ptr<LightSensor> sensor = std::make_unique<LightSensor>(mockGpio.get());
    sensor->init();
    
    Reading reading = sensor->getReading();
    TEST_ASSERT_FALSE(std::holds_alternative<std::monostate>(reading));
}

void test_light_sensor_day_mode() {
    std::unique_ptr<LightSensor> sensor = std::make_unique<LightSensor>(mockGpio.get());
    TestHelpers::configureMockForLightSensor(mockGpio.get(), true);  // Day mode
    sensor->init();
    
    Reading reading = sensor->getReading();
    bool isDayMode = std::get<bool>(reading);
    TEST_ASSERT_TRUE(isDayMode);
}

void test_light_sensor_night_mode() {
    std::unique_ptr<LightSensor> sensor = std::make_unique<LightSensor>(mockGpio.get());
    TestHelpers::configureMockForLightSensor(mockGpio.get(), false);  // Night mode
    sensor->init();
    
    Reading reading = sensor->getReading();
    bool isDayMode = std::get<bool>(reading);
    TEST_ASSERT_FALSE(isDayMode);
}

// ============================================================================
// MAIN TEST RUNNER
// ============================================================================

int main() {
    UNITY_BEGIN();
    
    printf("\n=== Clarity Phase 1 Sensor Tests ===\n");
    printf("Running comprehensive sensor test suite...\n\n");
    
    // Oil Pressure Sensor Tests
    printf("--- Oil Pressure Sensor Tests ---\n");
    RUN_TEST(test_oil_pressure_sensor_initialization);
    RUN_TEST(test_oil_pressure_sensor_adc_mapping_minimum);
    RUN_TEST(test_oil_pressure_sensor_adc_mapping_maximum);
    RUN_TEST(test_oil_pressure_sensor_delta_updates);
    
    // Oil Temperature Sensor Tests
    printf("\n--- Oil Temperature Sensor Tests ---\n");
    RUN_TEST(test_oil_temperature_sensor_initialization);
    RUN_TEST(test_oil_temperature_sensor_adc_mapping_minimum);
    RUN_TEST(test_oil_temperature_sensor_adc_mapping_maximum);
    
    // Key Sensor Tests
    printf("\n--- Key Sensor Tests ---\n");
    RUN_TEST(test_key_sensor_initialization);
    RUN_TEST(test_key_sensor_present_state);
    RUN_TEST(test_key_sensor_absent_state);
    
    // Lock Sensor Tests
    printf("\n--- Lock Sensor Tests ---\n");
    RUN_TEST(test_lock_sensor_initialization);
    RUN_TEST(test_lock_sensor_locked_state);
    RUN_TEST(test_lock_sensor_unlocked_state);
    
    // Light Sensor Tests
    printf("\n--- Light Sensor Tests ---\n");
    RUN_TEST(test_light_sensor_initialization);
    RUN_TEST(test_light_sensor_day_mode);
    RUN_TEST(test_light_sensor_night_mode);
    
    printf("\n=== Phase 1 Sensor Tests Complete ===\n");
    
    return UNITY_END();
}